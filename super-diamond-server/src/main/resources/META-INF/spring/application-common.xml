<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<context:annotation-config />
	<context:property-placeholder location="classpath:/META-INF/res/config-${profiles.active}.properties"/>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

      	<property name="initialSize" value="${jdbc.initialSize}" />
      	<property name="minIdle" value="${jdbc.minIdle}" />
      	<property name="maxActive" value="${jdbc.maxActive}" />

      	<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
      	<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

      	<property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
        <property name="logAbandoned" value="${jdbc.logAbandoned}" />

      	<property name="filters" value="${jdbc.filtes}" />
	</bean>

	<bean id="commonSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
			 p:dataSource-ref="dataSource"
			 p:mapperLocations="classpath*:com/github/diamond/web/persistence/*.xml"
			 p:typeAliasesPackage="com.github.diamond.web.model">
	</bean>

	<bean name="commonMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer"
			 p:basePackage="com.github.diamond.web.persistence"
			 p:sqlSessionFactoryBeanName="commonSqlSessionFactory">
	</bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
    	<constructor-arg index="0" ref="dataSource" />
    </bean>

    <!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
 	</bean>

 	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<tx:advice id="pay_transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="paginate*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="load*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="is*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceOperations" expression="execution(* com.github.diamond.web.service..*Service.*(..))"/>
		<aop:advisor advice-ref="pay_transactionAdvice" pointcut-ref="serviceOperations"/>
	</aop:config>

	<bean id="diamondServerHandler" class="com.github.diamond.netty.DiamondServerHandler" />
	<bean class="com.github.diamond.netty.DiamondServer">
		<property name="port" value="${netty.server.port}" />
		<property name="serverHandler" ref="diamondServerHandler" />
	</bean>
</beans>
